// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  cognitoId         String   @unique
  username          String   @unique
  profilePictureUrl String?
  teamId            Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
}

model Team {
  id                   Int      @id @default(autoincrement())
  teamName             String   @unique
  productOwnerUserId   Int?
  projectManagerUserId Int?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  projectTeams ProjectTeam[]
  user         User[]
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks        Task[]
  projectTeams ProjectTeam[]
}

model ProjectTeam {
  id        Int      @id @default(autoincrement())
  projectId Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
  team    Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  authorUserId   Int
  assignedUserId Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [id])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model Attachment {
  id               Int      @id @default(autoincrement())
  fileURL          String
  fileName         String
  taskId           Int
  uploadedByUserId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [uploadedByUserId], references: [id])
}

model TaskAssignment {
  id        Int      @id @default(autoincrement())
  userId    Int
  taskId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  taskId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
